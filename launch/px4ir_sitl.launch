<?xml version="1.0"?>
<launch>
    <!-- MAVROS posix SITL environment launch script -->
    <!-- launches MAVROS, PX4 SITL, Gazebo environment, and spawns vehicle -->
    <!-- vehicle pose in Gazebo -->
    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0"/>
    <!-- vehicle model and world -->
    <!-- Change the State Estimator ie EKF-->
    <arg name="est" default="ekf2"/>
    <!-- It's a little unclear what this arg does, but I think it selects which firmware params it loads and saves to -->
    <!-- so when it's set to px4ir it will use the params built based on configs in /ROMFS/init.d-posix/20001_px4ir -->
    <!-- and saves the file to ~/.ros/eeprom-->
    <!-- Although when I rebooted and let it auto generate the config the parameter height mode acted like it was wrong-->
    <arg name="vehicle" default="px4ir"/>

    <!-- This one is most accurate to a place in real world, but is resource intensive-->
    <!--<arg name="world" default="$(find mavlink_sitl_gazebo)/worlds/sonoma_raceway.world"/>-->

    <!-- Empty world with no obstacles-->
    <!--<arg name="world" default="$(find mavlink_sitl_gazebo)/worlds/empty.world"/> -->

    <!-- Small 3D City -->
    <arg name="world_file_name"    default="outdoor_village" />
    <arg name="world" default="$(find avoidance)/sim/worlds/$(arg world_file_name).world" />
    <!-- Pick your craft that you want to launch -->
    <arg name="sdf" default="$(find mavlink_sitl_gazebo)/models/px4ir_sensors/px4ir_sensors.sdf"/>

    <!-- Define a static transform from a camera internal frame to the fcu for every camera used -->
    <node pkg="tf" type="static_transform_publisher" name="tf_front_depth"
          args="0 0 0 -1.57 0 -1.57  camera_link realsense_cam_link 10"/>
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_link"
          args="0 0 0 0 0 0 base_link camera_link 10"/>
    <node pkg="tf" type="static_transform_publisher" name="tf_bottom_depth"
          args="0 0 0 0 3.14 0 camera_link terabee_cam_link 10"/>
    <node pkg="tf" type="static_transform_publisher" name="tf_bottom_cam"
          args="0 0 0 0 3.14 0 camera_link baslar_cam_link 10"/>

    <!-- gazebo configs -->
    <arg name="gui" default="false"/> <!-- Disables or Enables Gazebo GUI, Disable for better performance-->
    <arg name="debug" default="false"/>
    <arg name="verbose" default="false"/>
    <arg name="paused" default="false"/>
    <arg name="respawn_gazebo" default="false"/>
    <!-- MAVROS configs -->
    <arg name="fcu_url" default="udp://:14540@localhost:14557"/>
    <arg name="respawn_mavros" default="false"/>
    <!-- PX4 configs -->
    <arg name="interactive" default="true"/>
    <!-- PX4 SITL and Gazebo -->
    <include file="$(find px4)/launch/posix_sitl.launch">
        <arg name="est" value="$(arg est)"/>
        <arg name="x" value="$(arg x)"/>
        <arg name="y" value="$(arg y)"/>
        <arg name="z" value="$(arg z)"/>
        <arg name="R" value="$(arg R)"/>
        <arg name="P" value="$(arg P)"/>
        <arg name="Y" value="$(arg Y)"/>
        <arg name="world" value="$(arg world)"/>
        <arg name="vehicle" value="$(arg vehicle)"/>
        <arg name="sdf" value="$(arg sdf)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="interactive" value="$(arg interactive)"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
    </include>
    <!-- MAVROS -->
    <include file="$(find mavros)/launch/px4.launch">
        <!-- GCS link is provided by SITL -->
        <arg name="gcs_url" value=""/>
        <arg name="fcu_url" value="$(arg fcu_url)"/>
        <arg name="respawn_mavros" value="$(arg respawn_mavros)"/>
    </include>

      <!-- To simulate the terrabee, only use /teraranger_evo_64px/point_cloud-->
    <node pkg="vision_nodelets" type="grid_filter_node" name="terabee_downsample" output="screen"/>

      <!-- Mavros wants a range message so we average across the 64 points to produce a guess depth-->
    <node pkg="vision_nodelets" type="pcl2_to_range_node" name="pointcloud2range" output="screen"/>

</launch>
